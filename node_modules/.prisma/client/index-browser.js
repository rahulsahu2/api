
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  username: 'username',
  azureId: 'azureId',
  phone: 'phone',
  pincode: 'pincode',
  city: 'city',
  state: 'state',
  country: 'country',
  address: 'address',
  organization: 'organization',
  password: 'password',
  isAdmin: 'isAdmin',
  isVerified: 'isVerified',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.BulletinScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subTitle: 'subTitle',
  url: 'url',
  image_filesize: 'image_filesize',
  image_extension: 'image_extension',
  image_width: 'image_width',
  image_height: 'image_height',
  image_id: 'image_id',
  information: 'information',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subTitle: 'subTitle',
  startDate: 'startDate',
  endDate: 'endDate',
  url: 'url',
  information: 'information',
  image_filesize: 'image_filesize',
  image_extension: 'image_extension',
  image_width: 'image_width',
  image_height: 'image_height',
  image_id: 'image_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  date: 'date',
  information: 'information',
  linkType: 'linkType',
  link: 'link',
  linkTarget: 'linkTarget',
  image_filesize: 'image_filesize',
  image_extension: 'image_extension',
  image_width: 'image_width',
  image_height: 'image_height',
  image_id: 'image_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  srNo: 'srNo',
  random: 'random',
  price: 'price',
  description: 'description',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  userId: 'userId',
  paymentStatus: 'paymentStatus',
  paymentId: 'paymentId',
  amount: 'amount',
  transactionDate: 'transactionDate',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.VideoScalarFieldEnum = {
  id: 'id',
  name: 'name',
  srNo: 'srNo',
  video_type: 'video_type',
  isPublic: 'isPublic',
  isFeatured: 'isFeatured',
  videoId: 'videoId',
  url_filename: 'url_filename',
  url_filesize: 'url_filesize',
  thumbnail_filesize: 'thumbnail_filesize',
  thumbnail_extension: 'thumbnail_extension',
  thumbnail_width: 'thumbnail_width',
  thumbnail_height: 'thumbnail_height',
  thumbnail_id: 'thumbnail_id',
  planId: 'planId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.WatchingListScalarFieldEnum = {
  id: 'id',
  videoId: 'videoId',
  userId: 'userId',
  duration: 'duration',
  watchtime: 'watchtime',
  status: 'status',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  certificate_filename: 'certificate_filename',
  certificate_filesize: 'certificate_filesize',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.MembershipScalarFieldEnum = {
  id: 'id',
  location: 'location',
  type: 'type',
  name: 'name',
  phone: 'phone',
  email: 'email',
  designation: 'designation',
  company: 'company',
  pincode: 'pincode',
  city: 'city',
  state: 'state',
  country: 'country',
  address: 'address',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.CallRequestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  message: 'message',
  time: 'time',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.WillMeetUpScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  organization: 'organization',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  banner_type: 'banner_type',
  videoId: 'videoId',
  image_filesize: 'image_filesize',
  image_extension: 'image_extension',
  image_width: 'image_width',
  image_height: 'image_height',
  image_id: 'image_id',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.ConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  quote: 'quote',
  date: 'date',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  date: 'date',
  description: 'description',
  image_filesize: 'image_filesize',
  image_extension: 'image_extension',
  image_width: 'image_width',
  image_height: 'image_height',
  image_id: 'image_id',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.OneTimePasswordScalarFieldEnum = {
  id: 'id',
  otp: 'otp',
  email: 'email',
  isUsed: 'isUsed',
  userId: 'userId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  updatedById: 'updatedById',
  createdById: 'createdById'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Bulletin: 'Bulletin',
  Event: 'Event',
  Announcement: 'Announcement',
  Plan: 'Plan',
  Subscription: 'Subscription',
  Video: 'Video',
  WatchingList: 'WatchingList',
  Certificate: 'Certificate',
  Membership: 'Membership',
  CallRequest: 'CallRequest',
  WillMeetUp: 'WillMeetUp',
  Banner: 'Banner',
  Config: 'Config',
  Quote: 'Quote',
  Notification: 'Notification',
  OneTimePassword: 'OneTimePassword'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
