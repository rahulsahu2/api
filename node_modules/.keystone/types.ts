/* eslint-disable */

type Scalars = {
  readonly ID: string
  readonly Boolean: boolean
  readonly String: string
  readonly Int: number
  readonly Float: number
  readonly JSON: import('@keystone-6/core/types').JSONValue
  readonly Decimal: import('@keystone-6/core/types').Decimal | string
}

export type UserWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
  readonly email?: Scalars['String'] | null
}

export type UserWhereInput = {
  readonly AND?: ReadonlyArray<UserWhereInput> | UserWhereInput | null
  readonly OR?: ReadonlyArray<UserWhereInput> | UserWhereInput | null
  readonly NOT?: ReadonlyArray<UserWhereInput> | UserWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly email?: StringFilter | null
  readonly username?: StringFilter | null
  readonly azureId?: StringFilter | null
  readonly phone?: StringFilter | null
  readonly pincode?: StringFilter | null
  readonly city?: StringFilter | null
  readonly state?: StringFilter | null
  readonly country?: StringFilter | null
  readonly address?: StringFilter | null
  readonly organization?: StringFilter | null
  readonly isAdmin?: BooleanFilter | null
  readonly isVerified?: BooleanFilter | null
  readonly subscription?: SubscriptionManyRelationFilter | null
  readonly certificate?: CertificateManyRelationFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type IDFilter = {
  readonly equals?: Scalars['ID'] | null
  readonly in?: ReadonlyArray<Scalars['ID']> | Scalars['ID'] | null
  readonly notIn?: ReadonlyArray<Scalars['ID']> | Scalars['ID'] | null
  readonly lt?: Scalars['ID'] | null
  readonly lte?: Scalars['ID'] | null
  readonly gt?: Scalars['ID'] | null
  readonly gte?: Scalars['ID'] | null
  readonly not?: IDFilter | null
}

export type StringFilter = {
  readonly equals?: Scalars['String'] | null
  readonly in?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null
  readonly notIn?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null
  readonly lt?: Scalars['String'] | null
  readonly lte?: Scalars['String'] | null
  readonly gt?: Scalars['String'] | null
  readonly gte?: Scalars['String'] | null
  readonly contains?: Scalars['String'] | null
  readonly startsWith?: Scalars['String'] | null
  readonly endsWith?: Scalars['String'] | null
  readonly mode?: QueryMode | null
  readonly not?: NestedStringFilter | null
}

export type QueryMode =
  | 'default'
  | 'insensitive'

export type NestedStringFilter = {
  readonly equals?: Scalars['String'] | null
  readonly in?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null
  readonly notIn?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null
  readonly lt?: Scalars['String'] | null
  readonly lte?: Scalars['String'] | null
  readonly gt?: Scalars['String'] | null
  readonly gte?: Scalars['String'] | null
  readonly contains?: Scalars['String'] | null
  readonly startsWith?: Scalars['String'] | null
  readonly endsWith?: Scalars['String'] | null
  readonly not?: NestedStringFilter | null
}

export type BooleanFilter = {
  readonly equals?: Scalars['Boolean'] | null
  readonly not?: BooleanFilter | null
}

export type SubscriptionManyRelationFilter = {
  readonly every?: SubscriptionWhereInput | null
  readonly some?: SubscriptionWhereInput | null
  readonly none?: SubscriptionWhereInput | null
}

export type CertificateManyRelationFilter = {
  readonly every?: CertificateWhereInput | null
  readonly some?: CertificateWhereInput | null
  readonly none?: CertificateWhereInput | null
}

export type DateTimeNullableFilter = {
  readonly equals?: any | null
  readonly in?: ReadonlyArray<any> | any | null
  readonly notIn?: ReadonlyArray<any> | any | null
  readonly lt?: any | null
  readonly lte?: any | null
  readonly gt?: any | null
  readonly gte?: any | null
  readonly not?: DateTimeNullableFilter | null
}

export type UserOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly email?: OrderDirection | null
  readonly username?: OrderDirection | null
  readonly azureId?: OrderDirection | null
  readonly phone?: OrderDirection | null
  readonly pincode?: OrderDirection | null
  readonly city?: OrderDirection | null
  readonly state?: OrderDirection | null
  readonly country?: OrderDirection | null
  readonly address?: OrderDirection | null
  readonly organization?: OrderDirection | null
  readonly isAdmin?: OrderDirection | null
  readonly isVerified?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type OrderDirection =
  | 'asc'
  | 'desc'

export type UserUpdateInput = {
  readonly name?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly username?: Scalars['String'] | null
  readonly azureId?: Scalars['String'] | null
  readonly phone?: Scalars['String'] | null
  readonly pincode?: Scalars['String'] | null
  readonly city?: Scalars['String'] | null
  readonly state?: Scalars['String'] | null
  readonly country?: Scalars['String'] | null
  readonly address?: Scalars['String'] | null
  readonly organization?: Scalars['String'] | null
  readonly password?: Scalars['String'] | null
  readonly isAdmin?: Scalars['Boolean'] | null
  readonly isVerified?: Scalars['Boolean'] | null
  readonly subscription?: SubscriptionRelateToManyForUpdateInput | null
  readonly certificate?: CertificateRelateToManyForUpdateInput | null
}

export type SubscriptionRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<SubscriptionWhereUniqueInput> | SubscriptionWhereUniqueInput | null
  readonly set?: ReadonlyArray<SubscriptionWhereUniqueInput> | SubscriptionWhereUniqueInput | null
  readonly create?: ReadonlyArray<SubscriptionCreateInput> | SubscriptionCreateInput | null
  readonly connect?: ReadonlyArray<SubscriptionWhereUniqueInput> | SubscriptionWhereUniqueInput | null
}

export type CertificateRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<CertificateWhereUniqueInput> | CertificateWhereUniqueInput | null
  readonly set?: ReadonlyArray<CertificateWhereUniqueInput> | CertificateWhereUniqueInput | null
  readonly create?: ReadonlyArray<CertificateCreateInput> | CertificateCreateInput | null
  readonly connect?: ReadonlyArray<CertificateWhereUniqueInput> | CertificateWhereUniqueInput | null
}

export type UserUpdateArgs = {
  readonly where: UserWhereUniqueInput
  readonly data: UserUpdateInput
}

export type UserCreateInput = {
  readonly name?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly username?: Scalars['String'] | null
  readonly azureId?: Scalars['String'] | null
  readonly phone?: Scalars['String'] | null
  readonly pincode?: Scalars['String'] | null
  readonly city?: Scalars['String'] | null
  readonly state?: Scalars['String'] | null
  readonly country?: Scalars['String'] | null
  readonly address?: Scalars['String'] | null
  readonly organization?: Scalars['String'] | null
  readonly password?: Scalars['String'] | null
  readonly isAdmin?: Scalars['Boolean'] | null
  readonly isVerified?: Scalars['Boolean'] | null
  readonly subscription?: SubscriptionRelateToManyForCreateInput | null
  readonly certificate?: CertificateRelateToManyForCreateInput | null
}

export type SubscriptionRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<SubscriptionCreateInput> | SubscriptionCreateInput | null
  readonly connect?: ReadonlyArray<SubscriptionWhereUniqueInput> | SubscriptionWhereUniqueInput | null
}

export type CertificateRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<CertificateCreateInput> | CertificateCreateInput | null
  readonly connect?: ReadonlyArray<CertificateWhereUniqueInput> | CertificateWhereUniqueInput | null
}

export type S3ImageExtension =
  | 'jpg'
  | 'png'
  | 'webp'
  | 'gif'

export type BulletinWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type BulletinWhereInput = {
  readonly AND?: ReadonlyArray<BulletinWhereInput> | BulletinWhereInput | null
  readonly OR?: ReadonlyArray<BulletinWhereInput> | BulletinWhereInput | null
  readonly NOT?: ReadonlyArray<BulletinWhereInput> | BulletinWhereInput | null
  readonly id?: IDFilter | null
  readonly title?: StringFilter | null
  readonly subTitle?: StringFilter | null
  readonly url?: StringFilter | null
  readonly information?: StringFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type BulletinOrderByInput = {
  readonly id?: OrderDirection | null
  readonly title?: OrderDirection | null
  readonly subTitle?: OrderDirection | null
  readonly url?: OrderDirection | null
  readonly information?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
}

export type BulletinUpdateInput = {
  readonly title?: Scalars['String'] | null
  readonly subTitle?: Scalars['String'] | null
  readonly url?: Scalars['String'] | null
  readonly image?: S3ImageFieldInput | null
  readonly information?: Scalars['String'] | null
}

export type S3ImageFieldInput = {
  readonly upload?: any | null
  readonly ref?: Scalars['String'] | null
}

export type BulletinUpdateArgs = {
  readonly where: BulletinWhereUniqueInput
  readonly data: BulletinUpdateInput
}

export type BulletinCreateInput = {
  readonly title?: Scalars['String'] | null
  readonly subTitle?: Scalars['String'] | null
  readonly url?: Scalars['String'] | null
  readonly image?: S3ImageFieldInput | null
  readonly information?: Scalars['String'] | null
}

export type EventWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type EventWhereInput = {
  readonly AND?: ReadonlyArray<EventWhereInput> | EventWhereInput | null
  readonly OR?: ReadonlyArray<EventWhereInput> | EventWhereInput | null
  readonly NOT?: ReadonlyArray<EventWhereInput> | EventWhereInput | null
  readonly id?: IDFilter | null
  readonly title?: StringFilter | null
  readonly subTitle?: StringFilter | null
  readonly startDate?: DateTimeNullableFilter | null
  readonly endDate?: DateTimeNullableFilter | null
  readonly url?: StringFilter | null
  readonly information?: StringFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type EventOrderByInput = {
  readonly id?: OrderDirection | null
  readonly title?: OrderDirection | null
  readonly subTitle?: OrderDirection | null
  readonly startDate?: OrderDirection | null
  readonly endDate?: OrderDirection | null
  readonly url?: OrderDirection | null
  readonly information?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
}

export type EventUpdateInput = {
  readonly title?: Scalars['String'] | null
  readonly subTitle?: Scalars['String'] | null
  readonly startDate?: any | null
  readonly endDate?: any | null
  readonly url?: Scalars['String'] | null
  readonly information?: Scalars['String'] | null
  readonly image?: S3ImageFieldInput | null
}

export type EventUpdateArgs = {
  readonly where: EventWhereUniqueInput
  readonly data: EventUpdateInput
}

export type EventCreateInput = {
  readonly title?: Scalars['String'] | null
  readonly subTitle?: Scalars['String'] | null
  readonly startDate?: any | null
  readonly endDate?: any | null
  readonly url?: Scalars['String'] | null
  readonly information?: Scalars['String'] | null
  readonly image?: S3ImageFieldInput | null
}

export type AnnouncementWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type AnnouncementWhereInput = {
  readonly AND?: ReadonlyArray<AnnouncementWhereInput> | AnnouncementWhereInput | null
  readonly OR?: ReadonlyArray<AnnouncementWhereInput> | AnnouncementWhereInput | null
  readonly NOT?: ReadonlyArray<AnnouncementWhereInput> | AnnouncementWhereInput | null
  readonly id?: IDFilter | null
  readonly title?: StringFilter | null
  readonly date?: DateTimeFilter | null
  readonly information?: StringFilter | null
  readonly linkType?: StringNullableFilter | null
  readonly link?: StringFilter | null
  readonly linkTarget?: StringFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type DateTimeFilter = {
  readonly equals?: any | null
  readonly in?: ReadonlyArray<any> | any | null
  readonly notIn?: ReadonlyArray<any> | any | null
  readonly lt?: any | null
  readonly lte?: any | null
  readonly gt?: any | null
  readonly gte?: any | null
  readonly not?: DateTimeFilter | null
}

export type StringNullableFilter = {
  readonly equals?: Scalars['String'] | null
  readonly in?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null
  readonly notIn?: ReadonlyArray<Scalars['String']> | Scalars['String'] | null
  readonly lt?: Scalars['String'] | null
  readonly lte?: Scalars['String'] | null
  readonly gt?: Scalars['String'] | null
  readonly gte?: Scalars['String'] | null
  readonly contains?: Scalars['String'] | null
  readonly startsWith?: Scalars['String'] | null
  readonly endsWith?: Scalars['String'] | null
  readonly mode?: QueryMode | null
  readonly not?: StringNullableFilter | null
}

export type AnnouncementOrderByInput = {
  readonly id?: OrderDirection | null
  readonly title?: OrderDirection | null
  readonly date?: OrderDirection | null
  readonly information?: OrderDirection | null
  readonly linkType?: OrderDirection | null
  readonly link?: OrderDirection | null
  readonly linkTarget?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
}

export type AnnouncementUpdateInput = {
  readonly title?: Scalars['String'] | null
  readonly date?: any | null
  readonly information?: Scalars['String'] | null
  readonly linkType?: Scalars['String'] | null
  readonly link?: Scalars['String'] | null
  readonly linkTarget?: Scalars['String'] | null
  readonly image?: S3ImageFieldInput | null
}

export type AnnouncementUpdateArgs = {
  readonly where: AnnouncementWhereUniqueInput
  readonly data: AnnouncementUpdateInput
}

export type AnnouncementCreateInput = {
  readonly title?: Scalars['String'] | null
  readonly date?: any | null
  readonly information?: Scalars['String'] | null
  readonly linkType?: Scalars['String'] | null
  readonly link?: Scalars['String'] | null
  readonly linkTarget?: Scalars['String'] | null
  readonly image?: S3ImageFieldInput | null
}

export type PlanWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type PlanWhereInput = {
  readonly AND?: ReadonlyArray<PlanWhereInput> | PlanWhereInput | null
  readonly OR?: ReadonlyArray<PlanWhereInput> | PlanWhereInput | null
  readonly NOT?: ReadonlyArray<PlanWhereInput> | PlanWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly srNo?: IntNullableFilter | null
  readonly random?: StringNullableFilter | null
  readonly price?: FloatFilter | null
  readonly description?: StringFilter | null
  readonly subscription?: SubscriptionManyRelationFilter | null
  readonly video?: VideoManyRelationFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type IntNullableFilter = {
  readonly equals?: Scalars['Int'] | null
  readonly in?: ReadonlyArray<Scalars['Int']> | Scalars['Int'] | null
  readonly notIn?: ReadonlyArray<Scalars['Int']> | Scalars['Int'] | null
  readonly lt?: Scalars['Int'] | null
  readonly lte?: Scalars['Int'] | null
  readonly gt?: Scalars['Int'] | null
  readonly gte?: Scalars['Int'] | null
  readonly not?: IntNullableFilter | null
}

export type FloatFilter = {
  readonly equals?: Scalars['Float'] | null
  readonly in?: ReadonlyArray<Scalars['Float']> | Scalars['Float'] | null
  readonly notIn?: ReadonlyArray<Scalars['Float']> | Scalars['Float'] | null
  readonly lt?: Scalars['Float'] | null
  readonly lte?: Scalars['Float'] | null
  readonly gt?: Scalars['Float'] | null
  readonly gte?: Scalars['Float'] | null
  readonly not?: FloatFilter | null
}

export type VideoManyRelationFilter = {
  readonly every?: VideoWhereInput | null
  readonly some?: VideoWhereInput | null
  readonly none?: VideoWhereInput | null
}

export type PlanOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly srNo?: OrderDirection | null
  readonly random?: OrderDirection | null
  readonly price?: OrderDirection | null
  readonly description?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type PlanUpdateInput = {
  readonly name?: Scalars['String'] | null
  readonly srNo?: Scalars['Int'] | null
  readonly random?: Scalars['String'] | null
  readonly price?: Scalars['Float'] | null
  readonly description?: Scalars['String'] | null
  readonly subscription?: SubscriptionRelateToManyForUpdateInput | null
  readonly video?: VideoRelateToManyForUpdateInput | null
}

export type VideoRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<VideoWhereUniqueInput> | VideoWhereUniqueInput | null
  readonly set?: ReadonlyArray<VideoWhereUniqueInput> | VideoWhereUniqueInput | null
  readonly create?: ReadonlyArray<VideoCreateInput> | VideoCreateInput | null
  readonly connect?: ReadonlyArray<VideoWhereUniqueInput> | VideoWhereUniqueInput | null
}

export type PlanUpdateArgs = {
  readonly where: PlanWhereUniqueInput
  readonly data: PlanUpdateInput
}

export type PlanCreateInput = {
  readonly name?: Scalars['String'] | null
  readonly srNo?: Scalars['Int'] | null
  readonly random?: Scalars['String'] | null
  readonly price?: Scalars['Float'] | null
  readonly description?: Scalars['String'] | null
  readonly subscription?: SubscriptionRelateToManyForCreateInput | null
  readonly video?: VideoRelateToManyForCreateInput | null
}

export type VideoRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<VideoCreateInput> | VideoCreateInput | null
  readonly connect?: ReadonlyArray<VideoWhereUniqueInput> | VideoWhereUniqueInput | null
}

export type SubscriptionWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type SubscriptionWhereInput = {
  readonly AND?: ReadonlyArray<SubscriptionWhereInput> | SubscriptionWhereInput | null
  readonly OR?: ReadonlyArray<SubscriptionWhereInput> | SubscriptionWhereInput | null
  readonly NOT?: ReadonlyArray<SubscriptionWhereInput> | SubscriptionWhereInput | null
  readonly id?: IDFilter | null
  readonly plan?: PlanWhereInput | null
  readonly user?: UserWhereInput | null
  readonly paymentStatus?: StringFilter | null
  readonly paymentId?: StringFilter | null
  readonly amount?: FloatFilter | null
  readonly transactionDate?: DateTimeNullableFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type SubscriptionOrderByInput = {
  readonly id?: OrderDirection | null
  readonly paymentStatus?: OrderDirection | null
  readonly paymentId?: OrderDirection | null
  readonly amount?: OrderDirection | null
  readonly transactionDate?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type SubscriptionUpdateInput = {
  readonly plan?: PlanRelateToOneForUpdateInput | null
  readonly user?: UserRelateToOneForUpdateInput | null
  readonly paymentStatus?: Scalars['String'] | null
  readonly paymentId?: Scalars['String'] | null
  readonly amount?: Scalars['Float'] | null
  readonly transactionDate?: any | null
}

export type PlanRelateToOneForUpdateInput = {
  readonly create?: PlanCreateInput | null
  readonly connect?: PlanWhereUniqueInput | null
  readonly disconnect?: Scalars['Boolean'] | null
}

export type UserRelateToOneForUpdateInput = {
  readonly create?: UserCreateInput | null
  readonly connect?: UserWhereUniqueInput | null
  readonly disconnect?: Scalars['Boolean'] | null
}

export type SubscriptionUpdateArgs = {
  readonly where: SubscriptionWhereUniqueInput
  readonly data: SubscriptionUpdateInput
}

export type SubscriptionCreateInput = {
  readonly plan?: PlanRelateToOneForCreateInput | null
  readonly user?: UserRelateToOneForCreateInput | null
  readonly paymentStatus?: Scalars['String'] | null
  readonly paymentId?: Scalars['String'] | null
  readonly amount?: Scalars['Float'] | null
  readonly transactionDate?: any | null
}

export type PlanRelateToOneForCreateInput = {
  readonly create?: PlanCreateInput | null
  readonly connect?: PlanWhereUniqueInput | null
}

export type UserRelateToOneForCreateInput = {
  readonly create?: UserCreateInput | null
  readonly connect?: UserWhereUniqueInput | null
}

export type VideoWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type VideoWhereInput = {
  readonly AND?: ReadonlyArray<VideoWhereInput> | VideoWhereInput | null
  readonly OR?: ReadonlyArray<VideoWhereInput> | VideoWhereInput | null
  readonly NOT?: ReadonlyArray<VideoWhereInput> | VideoWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly srNo?: IntNullableFilter | null
  readonly video_type?: StringNullableFilter | null
  readonly isPublic?: BooleanFilter | null
  readonly isFeatured?: BooleanFilter | null
  readonly videoId?: StringFilter | null
  readonly plan?: PlanWhereInput | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type VideoOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly srNo?: OrderDirection | null
  readonly video_type?: OrderDirection | null
  readonly isPublic?: OrderDirection | null
  readonly isFeatured?: OrderDirection | null
  readonly videoId?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type VideoUpdateInput = {
  readonly name?: Scalars['String'] | null
  readonly srNo?: Scalars['Int'] | null
  readonly video_type?: Scalars['String'] | null
  readonly isPublic?: Scalars['Boolean'] | null
  readonly isFeatured?: Scalars['Boolean'] | null
  readonly videoId?: Scalars['String'] | null
  readonly url?: S3FileFieldInput | null
  readonly thumbnail?: S3ImageFieldInput | null
  readonly plan?: PlanRelateToOneForUpdateInput | null
}

export type S3FileFieldInput = {
  readonly upload?: any | null
  readonly ref?: Scalars['String'] | null
}

export type VideoUpdateArgs = {
  readonly where: VideoWhereUniqueInput
  readonly data: VideoUpdateInput
}

export type VideoCreateInput = {
  readonly name?: Scalars['String'] | null
  readonly srNo?: Scalars['Int'] | null
  readonly video_type?: Scalars['String'] | null
  readonly isPublic?: Scalars['Boolean'] | null
  readonly isFeatured?: Scalars['Boolean'] | null
  readonly videoId?: Scalars['String'] | null
  readonly url?: S3FileFieldInput | null
  readonly thumbnail?: S3ImageFieldInput | null
  readonly plan?: PlanRelateToOneForCreateInput | null
}

export type WatchingListWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type WatchingListWhereInput = {
  readonly AND?: ReadonlyArray<WatchingListWhereInput> | WatchingListWhereInput | null
  readonly OR?: ReadonlyArray<WatchingListWhereInput> | WatchingListWhereInput | null
  readonly NOT?: ReadonlyArray<WatchingListWhereInput> | WatchingListWhereInput | null
  readonly id?: IDFilter | null
  readonly video?: VideoWhereInput | null
  readonly user?: UserWhereInput | null
  readonly duration?: StringFilter | null
  readonly watchtime?: StringFilter | null
  readonly status?: StringNullableFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type WatchingListOrderByInput = {
  readonly id?: OrderDirection | null
  readonly duration?: OrderDirection | null
  readonly watchtime?: OrderDirection | null
  readonly status?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type WatchingListUpdateInput = {
  readonly video?: VideoRelateToOneForUpdateInput | null
  readonly user?: UserRelateToOneForUpdateInput | null
  readonly duration?: Scalars['String'] | null
  readonly watchtime?: Scalars['String'] | null
  readonly status?: Scalars['String'] | null
}

export type VideoRelateToOneForUpdateInput = {
  readonly create?: VideoCreateInput | null
  readonly connect?: VideoWhereUniqueInput | null
  readonly disconnect?: Scalars['Boolean'] | null
}

export type WatchingListUpdateArgs = {
  readonly where: WatchingListWhereUniqueInput
  readonly data: WatchingListUpdateInput
}

export type WatchingListCreateInput = {
  readonly video?: VideoRelateToOneForCreateInput | null
  readonly user?: UserRelateToOneForCreateInput | null
  readonly duration?: Scalars['String'] | null
  readonly watchtime?: Scalars['String'] | null
  readonly status?: Scalars['String'] | null
}

export type VideoRelateToOneForCreateInput = {
  readonly create?: VideoCreateInput | null
  readonly connect?: VideoWhereUniqueInput | null
}

export type CertificateWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type CertificateWhereInput = {
  readonly AND?: ReadonlyArray<CertificateWhereInput> | CertificateWhereInput | null
  readonly OR?: ReadonlyArray<CertificateWhereInput> | CertificateWhereInput | null
  readonly NOT?: ReadonlyArray<CertificateWhereInput> | CertificateWhereInput | null
  readonly id?: IDFilter | null
  readonly user?: UserWhereInput | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type CertificateOrderByInput = {
  readonly id?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
}

export type CertificateUpdateInput = {
  readonly user?: UserRelateToOneForUpdateInput | null
  readonly certificate?: S3FileFieldInput | null
}

export type CertificateUpdateArgs = {
  readonly where: CertificateWhereUniqueInput
  readonly data: CertificateUpdateInput
}

export type CertificateCreateInput = {
  readonly user?: UserRelateToOneForCreateInput | null
  readonly certificate?: S3FileFieldInput | null
}

export type MembershipWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type MembershipWhereInput = {
  readonly AND?: ReadonlyArray<MembershipWhereInput> | MembershipWhereInput | null
  readonly OR?: ReadonlyArray<MembershipWhereInput> | MembershipWhereInput | null
  readonly NOT?: ReadonlyArray<MembershipWhereInput> | MembershipWhereInput | null
  readonly id?: IDFilter | null
  readonly location?: StringNullableFilter | null
  readonly type?: StringNullableFilter | null
  readonly name?: StringFilter | null
  readonly phone?: StringFilter | null
  readonly email?: StringFilter | null
  readonly designation?: StringFilter | null
  readonly company?: StringFilter | null
  readonly pincode?: StringFilter | null
  readonly city?: StringFilter | null
  readonly state?: StringFilter | null
  readonly country?: StringFilter | null
  readonly address?: StringFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type MembershipOrderByInput = {
  readonly id?: OrderDirection | null
  readonly location?: OrderDirection | null
  readonly type?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly phone?: OrderDirection | null
  readonly email?: OrderDirection | null
  readonly designation?: OrderDirection | null
  readonly company?: OrderDirection | null
  readonly pincode?: OrderDirection | null
  readonly city?: OrderDirection | null
  readonly state?: OrderDirection | null
  readonly country?: OrderDirection | null
  readonly address?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type MembershipUpdateInput = {
  readonly location?: Scalars['String'] | null
  readonly type?: Scalars['String'] | null
  readonly name?: Scalars['String'] | null
  readonly phone?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly designation?: Scalars['String'] | null
  readonly company?: Scalars['String'] | null
  readonly pincode?: Scalars['String'] | null
  readonly city?: Scalars['String'] | null
  readonly state?: Scalars['String'] | null
  readonly country?: Scalars['String'] | null
  readonly address?: Scalars['String'] | null
}

export type MembershipUpdateArgs = {
  readonly where: MembershipWhereUniqueInput
  readonly data: MembershipUpdateInput
}

export type MembershipCreateInput = {
  readonly location?: Scalars['String'] | null
  readonly type?: Scalars['String'] | null
  readonly name?: Scalars['String'] | null
  readonly phone?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly designation?: Scalars['String'] | null
  readonly company?: Scalars['String'] | null
  readonly pincode?: Scalars['String'] | null
  readonly city?: Scalars['String'] | null
  readonly state?: Scalars['String'] | null
  readonly country?: Scalars['String'] | null
  readonly address?: Scalars['String'] | null
}

export type CallRequestWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type CallRequestWhereInput = {
  readonly AND?: ReadonlyArray<CallRequestWhereInput> | CallRequestWhereInput | null
  readonly OR?: ReadonlyArray<CallRequestWhereInput> | CallRequestWhereInput | null
  readonly NOT?: ReadonlyArray<CallRequestWhereInput> | CallRequestWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly email?: StringFilter | null
  readonly phoneNumber?: StringFilter | null
  readonly message?: StringFilter | null
  readonly time?: StringFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type CallRequestOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly email?: OrderDirection | null
  readonly phoneNumber?: OrderDirection | null
  readonly message?: OrderDirection | null
  readonly time?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type CallRequestUpdateInput = {
  readonly name?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly phoneNumber?: Scalars['String'] | null
  readonly message?: Scalars['String'] | null
  readonly time?: Scalars['String'] | null
}

export type CallRequestUpdateArgs = {
  readonly where: CallRequestWhereUniqueInput
  readonly data: CallRequestUpdateInput
}

export type CallRequestCreateInput = {
  readonly name?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly phoneNumber?: Scalars['String'] | null
  readonly message?: Scalars['String'] | null
  readonly time?: Scalars['String'] | null
}

export type WillMeetUpWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type WillMeetUpWhereInput = {
  readonly AND?: ReadonlyArray<WillMeetUpWhereInput> | WillMeetUpWhereInput | null
  readonly OR?: ReadonlyArray<WillMeetUpWhereInput> | WillMeetUpWhereInput | null
  readonly NOT?: ReadonlyArray<WillMeetUpWhereInput> | WillMeetUpWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly email?: StringFilter | null
  readonly phoneNumber?: StringFilter | null
  readonly organization?: StringFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type WillMeetUpOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly email?: OrderDirection | null
  readonly phoneNumber?: OrderDirection | null
  readonly organization?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type WillMeetUpUpdateInput = {
  readonly name?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly phoneNumber?: Scalars['String'] | null
  readonly organization?: Scalars['String'] | null
}

export type WillMeetUpUpdateArgs = {
  readonly where: WillMeetUpWhereUniqueInput
  readonly data: WillMeetUpUpdateInput
}

export type WillMeetUpCreateInput = {
  readonly name?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly phoneNumber?: Scalars['String'] | null
  readonly organization?: Scalars['String'] | null
}

export type BannerWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type BannerWhereInput = {
  readonly AND?: ReadonlyArray<BannerWhereInput> | BannerWhereInput | null
  readonly OR?: ReadonlyArray<BannerWhereInput> | BannerWhereInput | null
  readonly NOT?: ReadonlyArray<BannerWhereInput> | BannerWhereInput | null
  readonly id?: IDFilter | null
  readonly name?: StringFilter | null
  readonly banner_type?: StringNullableFilter | null
  readonly videoId?: StringFilter | null
  readonly active?: BooleanFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type BannerOrderByInput = {
  readonly id?: OrderDirection | null
  readonly name?: OrderDirection | null
  readonly banner_type?: OrderDirection | null
  readonly videoId?: OrderDirection | null
  readonly active?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
}

export type BannerUpdateInput = {
  readonly name?: Scalars['String'] | null
  readonly banner_type?: Scalars['String'] | null
  readonly videoId?: Scalars['String'] | null
  readonly image?: S3ImageFieldInput | null
  readonly active?: Scalars['Boolean'] | null
}

export type BannerUpdateArgs = {
  readonly where: BannerWhereUniqueInput
  readonly data: BannerUpdateInput
}

export type BannerCreateInput = {
  readonly name?: Scalars['String'] | null
  readonly banner_type?: Scalars['String'] | null
  readonly videoId?: Scalars['String'] | null
  readonly image?: S3ImageFieldInput | null
  readonly active?: Scalars['Boolean'] | null
}

export type ConfigWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
  readonly key?: Scalars['String'] | null
}

export type ConfigWhereInput = {
  readonly AND?: ReadonlyArray<ConfigWhereInput> | ConfigWhereInput | null
  readonly OR?: ReadonlyArray<ConfigWhereInput> | ConfigWhereInput | null
  readonly NOT?: ReadonlyArray<ConfigWhereInput> | ConfigWhereInput | null
  readonly id?: IDFilter | null
  readonly key?: StringFilter | null
  readonly value?: StringFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type ConfigOrderByInput = {
  readonly id?: OrderDirection | null
  readonly key?: OrderDirection | null
  readonly value?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
}

export type ConfigUpdateInput = {
  readonly key?: Scalars['String'] | null
  readonly value?: Scalars['String'] | null
}

export type ConfigUpdateArgs = {
  readonly where: ConfigWhereUniqueInput
  readonly data: ConfigUpdateInput
}

export type ConfigCreateInput = {
  readonly key?: Scalars['String'] | null
  readonly value?: Scalars['String'] | null
}

export type QuoteWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type QuoteWhereInput = {
  readonly AND?: ReadonlyArray<QuoteWhereInput> | QuoteWhereInput | null
  readonly OR?: ReadonlyArray<QuoteWhereInput> | QuoteWhereInput | null
  readonly NOT?: ReadonlyArray<QuoteWhereInput> | QuoteWhereInput | null
  readonly id?: IDFilter | null
  readonly quote?: StringFilter | null
  readonly date?: DateTimeFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type QuoteOrderByInput = {
  readonly id?: OrderDirection | null
  readonly quote?: OrderDirection | null
  readonly date?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type QuoteUpdateInput = {
  readonly quote?: Scalars['String'] | null
  readonly date?: any | null
}

export type QuoteUpdateArgs = {
  readonly where: QuoteWhereUniqueInput
  readonly data: QuoteUpdateInput
}

export type QuoteCreateInput = {
  readonly quote?: Scalars['String'] | null
  readonly date?: any | null
}

export type NotificationWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
}

export type NotificationWhereInput = {
  readonly AND?: ReadonlyArray<NotificationWhereInput> | NotificationWhereInput | null
  readonly OR?: ReadonlyArray<NotificationWhereInput> | NotificationWhereInput | null
  readonly NOT?: ReadonlyArray<NotificationWhereInput> | NotificationWhereInput | null
  readonly id?: IDFilter | null
  readonly title?: StringFilter | null
  readonly date?: DateTimeFilter | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type NotificationOrderByInput = {
  readonly id?: OrderDirection | null
  readonly title?: OrderDirection | null
  readonly date?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type NotificationUpdateInput = {
  readonly title?: Scalars['String'] | null
  readonly date?: any | null
  readonly description?: Scalars['JSON'] | null
  readonly image?: S3ImageFieldInput | null
}

export type NotificationUpdateArgs = {
  readonly where: NotificationWhereUniqueInput
  readonly data: NotificationUpdateInput
}

export type NotificationCreateInput = {
  readonly title?: Scalars['String'] | null
  readonly date?: any | null
  readonly description?: Scalars['JSON'] | null
  readonly image?: S3ImageFieldInput | null
}

export type OneTimePasswordWhereUniqueInput = {
  readonly id?: Scalars['ID'] | null
  readonly otp?: Scalars['String'] | null
}

export type OneTimePasswordWhereInput = {
  readonly AND?: ReadonlyArray<OneTimePasswordWhereInput> | OneTimePasswordWhereInput | null
  readonly OR?: ReadonlyArray<OneTimePasswordWhereInput> | OneTimePasswordWhereInput | null
  readonly NOT?: ReadonlyArray<OneTimePasswordWhereInput> | OneTimePasswordWhereInput | null
  readonly id?: IDFilter | null
  readonly otp?: StringFilter | null
  readonly email?: StringFilter | null
  readonly isUsed?: BooleanFilter | null
  readonly user?: UserWhereInput | null
  readonly updatedAt?: DateTimeNullableFilter | null
  readonly createdAt?: DateTimeNullableFilter | null
  readonly updatedBy?: UserWhereInput | null
  readonly createdBy?: UserWhereInput | null
}

export type OneTimePasswordOrderByInput = {
  readonly id?: OrderDirection | null
  readonly otp?: OrderDirection | null
  readonly email?: OrderDirection | null
  readonly isUsed?: OrderDirection | null
  readonly updatedAt?: OrderDirection | null
  readonly createdAt?: OrderDirection | null
}

export type OneTimePasswordUpdateInput = {
  readonly otp?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly isUsed?: Scalars['Boolean'] | null
  readonly user?: UserRelateToOneForUpdateInput | null
}

export type OneTimePasswordUpdateArgs = {
  readonly where: OneTimePasswordWhereUniqueInput
  readonly data: OneTimePasswordUpdateInput
}

export type OneTimePasswordCreateInput = {
  readonly otp?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly isUsed?: Scalars['Boolean'] | null
  readonly user?: UserRelateToOneForCreateInput | null
}

export type CreateInitialUserInput = {
  readonly name?: Scalars['String'] | null
  readonly email?: Scalars['String'] | null
  readonly password?: Scalars['String'] | null
  readonly isAdmin?: Scalars['Boolean'] | null
}

export type KeystoneAdminUIFieldMetaIsNonNull =
  | 'read'
  | 'create'
  | 'update'

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | 'edit'
  | 'hidden'

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | 'read'
  | 'hidden'

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | 'edit'
  | 'read'
  | 'hidden'

export type KeystoneAdminUIFieldMetaItemViewFieldPosition =
  | 'form'
  | 'sidebar'

export type KeystoneAdminUISortDirection =
  | 'ASC'
  | 'DESC'

type ResolvedUserCreateInput = {
  id?: import('@prisma/client').Prisma.UserCreateInput['id']
  name?: import('@prisma/client').Prisma.UserCreateInput['name']
  email?: import('@prisma/client').Prisma.UserCreateInput['email']
  username?: import('@prisma/client').Prisma.UserCreateInput['username']
  azureId?: import('@prisma/client').Prisma.UserCreateInput['azureId']
  phone?: import('@prisma/client').Prisma.UserCreateInput['phone']
  pincode?: import('@prisma/client').Prisma.UserCreateInput['pincode']
  city?: import('@prisma/client').Prisma.UserCreateInput['city']
  state?: import('@prisma/client').Prisma.UserCreateInput['state']
  country?: import('@prisma/client').Prisma.UserCreateInput['country']
  address?: import('@prisma/client').Prisma.UserCreateInput['address']
  organization?: import('@prisma/client').Prisma.UserCreateInput['organization']
  password?: import('@prisma/client').Prisma.UserCreateInput['password']
  isAdmin?: import('@prisma/client').Prisma.UserCreateInput['isAdmin']
  isVerified?: import('@prisma/client').Prisma.UserCreateInput['isVerified']
  subscription?: import('@prisma/client').Prisma.UserCreateInput['subscription']
  certificate?: import('@prisma/client').Prisma.UserCreateInput['certificate']
  updatedAt?: import('@prisma/client').Prisma.UserCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.UserCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.UserCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.UserCreateInput['createdBy']
}

type ResolvedUserUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.UserUpdateInput['name']
  email?: import('@prisma/client').Prisma.UserUpdateInput['email']
  username?: import('@prisma/client').Prisma.UserUpdateInput['username']
  azureId?: import('@prisma/client').Prisma.UserUpdateInput['azureId']
  phone?: import('@prisma/client').Prisma.UserUpdateInput['phone']
  pincode?: import('@prisma/client').Prisma.UserUpdateInput['pincode']
  city?: import('@prisma/client').Prisma.UserUpdateInput['city']
  state?: import('@prisma/client').Prisma.UserUpdateInput['state']
  country?: import('@prisma/client').Prisma.UserUpdateInput['country']
  address?: import('@prisma/client').Prisma.UserUpdateInput['address']
  organization?: import('@prisma/client').Prisma.UserUpdateInput['organization']
  password?: import('@prisma/client').Prisma.UserUpdateInput['password']
  isAdmin?: import('@prisma/client').Prisma.UserUpdateInput['isAdmin']
  isVerified?: import('@prisma/client').Prisma.UserUpdateInput['isVerified']
  subscription?: import('@prisma/client').Prisma.UserUpdateInput['subscription']
  certificate?: import('@prisma/client').Prisma.UserUpdateInput['certificate']
  updatedAt?: import('@prisma/client').Prisma.UserUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.UserUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.UserUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.UserUpdateInput['createdBy']
}

type ResolvedBulletinCreateInput = {
  id?: import('@prisma/client').Prisma.BulletinCreateInput['id']
  title?: import('@prisma/client').Prisma.BulletinCreateInput['title']
  subTitle?: import('@prisma/client').Prisma.BulletinCreateInput['subTitle']
  url?: import('@prisma/client').Prisma.BulletinCreateInput['url']
  image: {
  filesize?: import('@prisma/client').Prisma.BulletinCreateInput['image_filesize']
  extension?: import('@prisma/client').Prisma.BulletinCreateInput['image_extension']
  width?: import('@prisma/client').Prisma.BulletinCreateInput['image_width']
  height?: import('@prisma/client').Prisma.BulletinCreateInput['image_height']
  id?: import('@prisma/client').Prisma.BulletinCreateInput['image_id']
  }
  information?: import('@prisma/client').Prisma.BulletinCreateInput['information']
  createdAt?: import('@prisma/client').Prisma.BulletinCreateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.BulletinCreateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.BulletinCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.BulletinCreateInput['createdBy']
}

type ResolvedBulletinUpdateInput = {
  id?: undefined
  title?: import('@prisma/client').Prisma.BulletinUpdateInput['title']
  subTitle?: import('@prisma/client').Prisma.BulletinUpdateInput['subTitle']
  url?: import('@prisma/client').Prisma.BulletinUpdateInput['url']
  image: {
  filesize?: import('@prisma/client').Prisma.BulletinUpdateInput['image_filesize']
  extension?: import('@prisma/client').Prisma.BulletinUpdateInput['image_extension']
  width?: import('@prisma/client').Prisma.BulletinUpdateInput['image_width']
  height?: import('@prisma/client').Prisma.BulletinUpdateInput['image_height']
  id?: import('@prisma/client').Prisma.BulletinUpdateInput['image_id']
  }
  information?: import('@prisma/client').Prisma.BulletinUpdateInput['information']
  createdAt?: import('@prisma/client').Prisma.BulletinUpdateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.BulletinUpdateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.BulletinUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.BulletinUpdateInput['createdBy']
}

type ResolvedEventCreateInput = {
  id?: import('@prisma/client').Prisma.EventCreateInput['id']
  title?: import('@prisma/client').Prisma.EventCreateInput['title']
  subTitle?: import('@prisma/client').Prisma.EventCreateInput['subTitle']
  startDate?: import('@prisma/client').Prisma.EventCreateInput['startDate']
  endDate?: import('@prisma/client').Prisma.EventCreateInput['endDate']
  url?: import('@prisma/client').Prisma.EventCreateInput['url']
  information?: import('@prisma/client').Prisma.EventCreateInput['information']
  image: {
  filesize?: import('@prisma/client').Prisma.EventCreateInput['image_filesize']
  extension?: import('@prisma/client').Prisma.EventCreateInput['image_extension']
  width?: import('@prisma/client').Prisma.EventCreateInput['image_width']
  height?: import('@prisma/client').Prisma.EventCreateInput['image_height']
  id?: import('@prisma/client').Prisma.EventCreateInput['image_id']
  }
  createdAt?: import('@prisma/client').Prisma.EventCreateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.EventCreateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.EventCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.EventCreateInput['createdBy']
}

type ResolvedEventUpdateInput = {
  id?: undefined
  title?: import('@prisma/client').Prisma.EventUpdateInput['title']
  subTitle?: import('@prisma/client').Prisma.EventUpdateInput['subTitle']
  startDate?: import('@prisma/client').Prisma.EventUpdateInput['startDate']
  endDate?: import('@prisma/client').Prisma.EventUpdateInput['endDate']
  url?: import('@prisma/client').Prisma.EventUpdateInput['url']
  information?: import('@prisma/client').Prisma.EventUpdateInput['information']
  image: {
  filesize?: import('@prisma/client').Prisma.EventUpdateInput['image_filesize']
  extension?: import('@prisma/client').Prisma.EventUpdateInput['image_extension']
  width?: import('@prisma/client').Prisma.EventUpdateInput['image_width']
  height?: import('@prisma/client').Prisma.EventUpdateInput['image_height']
  id?: import('@prisma/client').Prisma.EventUpdateInput['image_id']
  }
  createdAt?: import('@prisma/client').Prisma.EventUpdateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.EventUpdateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.EventUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.EventUpdateInput['createdBy']
}

type ResolvedAnnouncementCreateInput = {
  id?: import('@prisma/client').Prisma.AnnouncementCreateInput['id']
  title?: import('@prisma/client').Prisma.AnnouncementCreateInput['title']
  date?: import('@prisma/client').Prisma.AnnouncementCreateInput['date']
  information?: import('@prisma/client').Prisma.AnnouncementCreateInput['information']
  linkType?: import('@prisma/client').Prisma.AnnouncementCreateInput['linkType']
  link?: import('@prisma/client').Prisma.AnnouncementCreateInput['link']
  linkTarget?: import('@prisma/client').Prisma.AnnouncementCreateInput['linkTarget']
  image: {
  filesize?: import('@prisma/client').Prisma.AnnouncementCreateInput['image_filesize']
  extension?: import('@prisma/client').Prisma.AnnouncementCreateInput['image_extension']
  width?: import('@prisma/client').Prisma.AnnouncementCreateInput['image_width']
  height?: import('@prisma/client').Prisma.AnnouncementCreateInput['image_height']
  id?: import('@prisma/client').Prisma.AnnouncementCreateInput['image_id']
  }
  createdAt?: import('@prisma/client').Prisma.AnnouncementCreateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.AnnouncementCreateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.AnnouncementCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.AnnouncementCreateInput['createdBy']
}

type ResolvedAnnouncementUpdateInput = {
  id?: undefined
  title?: import('@prisma/client').Prisma.AnnouncementUpdateInput['title']
  date?: import('@prisma/client').Prisma.AnnouncementUpdateInput['date']
  information?: import('@prisma/client').Prisma.AnnouncementUpdateInput['information']
  linkType?: import('@prisma/client').Prisma.AnnouncementUpdateInput['linkType']
  link?: import('@prisma/client').Prisma.AnnouncementUpdateInput['link']
  linkTarget?: import('@prisma/client').Prisma.AnnouncementUpdateInput['linkTarget']
  image: {
  filesize?: import('@prisma/client').Prisma.AnnouncementUpdateInput['image_filesize']
  extension?: import('@prisma/client').Prisma.AnnouncementUpdateInput['image_extension']
  width?: import('@prisma/client').Prisma.AnnouncementUpdateInput['image_width']
  height?: import('@prisma/client').Prisma.AnnouncementUpdateInput['image_height']
  id?: import('@prisma/client').Prisma.AnnouncementUpdateInput['image_id']
  }
  createdAt?: import('@prisma/client').Prisma.AnnouncementUpdateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.AnnouncementUpdateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.AnnouncementUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.AnnouncementUpdateInput['createdBy']
}

type ResolvedPlanCreateInput = {
  id?: import('@prisma/client').Prisma.PlanCreateInput['id']
  name?: import('@prisma/client').Prisma.PlanCreateInput['name']
  srNo?: import('@prisma/client').Prisma.PlanCreateInput['srNo']
  random?: import('@prisma/client').Prisma.PlanCreateInput['random']
  price?: import('@prisma/client').Prisma.PlanCreateInput['price']
  description?: import('@prisma/client').Prisma.PlanCreateInput['description']
  subscription?: import('@prisma/client').Prisma.PlanCreateInput['subscription']
  video?: import('@prisma/client').Prisma.PlanCreateInput['video']
  updatedAt?: import('@prisma/client').Prisma.PlanCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.PlanCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.PlanCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.PlanCreateInput['createdBy']
}

type ResolvedPlanUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.PlanUpdateInput['name']
  srNo?: import('@prisma/client').Prisma.PlanUpdateInput['srNo']
  random?: import('@prisma/client').Prisma.PlanUpdateInput['random']
  price?: import('@prisma/client').Prisma.PlanUpdateInput['price']
  description?: import('@prisma/client').Prisma.PlanUpdateInput['description']
  subscription?: import('@prisma/client').Prisma.PlanUpdateInput['subscription']
  video?: import('@prisma/client').Prisma.PlanUpdateInput['video']
  updatedAt?: import('@prisma/client').Prisma.PlanUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.PlanUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.PlanUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.PlanUpdateInput['createdBy']
}

type ResolvedSubscriptionCreateInput = {
  id?: import('@prisma/client').Prisma.SubscriptionCreateInput['id']
  plan?: import('@prisma/client').Prisma.SubscriptionCreateInput['plan']
  user?: import('@prisma/client').Prisma.SubscriptionCreateInput['user']
  paymentStatus?: import('@prisma/client').Prisma.SubscriptionCreateInput['paymentStatus']
  paymentId?: import('@prisma/client').Prisma.SubscriptionCreateInput['paymentId']
  amount?: import('@prisma/client').Prisma.SubscriptionCreateInput['amount']
  transactionDate?: import('@prisma/client').Prisma.SubscriptionCreateInput['transactionDate']
  updatedAt?: import('@prisma/client').Prisma.SubscriptionCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.SubscriptionCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.SubscriptionCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.SubscriptionCreateInput['createdBy']
}

type ResolvedSubscriptionUpdateInput = {
  id?: undefined
  plan?: import('@prisma/client').Prisma.SubscriptionUpdateInput['plan']
  user?: import('@prisma/client').Prisma.SubscriptionUpdateInput['user']
  paymentStatus?: import('@prisma/client').Prisma.SubscriptionUpdateInput['paymentStatus']
  paymentId?: import('@prisma/client').Prisma.SubscriptionUpdateInput['paymentId']
  amount?: import('@prisma/client').Prisma.SubscriptionUpdateInput['amount']
  transactionDate?: import('@prisma/client').Prisma.SubscriptionUpdateInput['transactionDate']
  updatedAt?: import('@prisma/client').Prisma.SubscriptionUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.SubscriptionUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.SubscriptionUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.SubscriptionUpdateInput['createdBy']
}

type ResolvedVideoCreateInput = {
  id?: import('@prisma/client').Prisma.VideoCreateInput['id']
  name?: import('@prisma/client').Prisma.VideoCreateInput['name']
  srNo?: import('@prisma/client').Prisma.VideoCreateInput['srNo']
  video_type?: import('@prisma/client').Prisma.VideoCreateInput['video_type']
  isPublic?: import('@prisma/client').Prisma.VideoCreateInput['isPublic']
  isFeatured?: import('@prisma/client').Prisma.VideoCreateInput['isFeatured']
  videoId?: import('@prisma/client').Prisma.VideoCreateInput['videoId']
  url: {
  filename?: import('@prisma/client').Prisma.VideoCreateInput['url_filename']
  filesize?: import('@prisma/client').Prisma.VideoCreateInput['url_filesize']
  }
  thumbnail: {
  filesize?: import('@prisma/client').Prisma.VideoCreateInput['thumbnail_filesize']
  extension?: import('@prisma/client').Prisma.VideoCreateInput['thumbnail_extension']
  width?: import('@prisma/client').Prisma.VideoCreateInput['thumbnail_width']
  height?: import('@prisma/client').Prisma.VideoCreateInput['thumbnail_height']
  id?: import('@prisma/client').Prisma.VideoCreateInput['thumbnail_id']
  }
  plan?: import('@prisma/client').Prisma.VideoCreateInput['plan']
  updatedAt?: import('@prisma/client').Prisma.VideoCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.VideoCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.VideoCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.VideoCreateInput['createdBy']
}

type ResolvedVideoUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.VideoUpdateInput['name']
  srNo?: import('@prisma/client').Prisma.VideoUpdateInput['srNo']
  video_type?: import('@prisma/client').Prisma.VideoUpdateInput['video_type']
  isPublic?: import('@prisma/client').Prisma.VideoUpdateInput['isPublic']
  isFeatured?: import('@prisma/client').Prisma.VideoUpdateInput['isFeatured']
  videoId?: import('@prisma/client').Prisma.VideoUpdateInput['videoId']
  url: {
  filename?: import('@prisma/client').Prisma.VideoUpdateInput['url_filename']
  filesize?: import('@prisma/client').Prisma.VideoUpdateInput['url_filesize']
  }
  thumbnail: {
  filesize?: import('@prisma/client').Prisma.VideoUpdateInput['thumbnail_filesize']
  extension?: import('@prisma/client').Prisma.VideoUpdateInput['thumbnail_extension']
  width?: import('@prisma/client').Prisma.VideoUpdateInput['thumbnail_width']
  height?: import('@prisma/client').Prisma.VideoUpdateInput['thumbnail_height']
  id?: import('@prisma/client').Prisma.VideoUpdateInput['thumbnail_id']
  }
  plan?: import('@prisma/client').Prisma.VideoUpdateInput['plan']
  updatedAt?: import('@prisma/client').Prisma.VideoUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.VideoUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.VideoUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.VideoUpdateInput['createdBy']
}

type ResolvedWatchingListCreateInput = {
  id?: import('@prisma/client').Prisma.WatchingListCreateInput['id']
  video?: import('@prisma/client').Prisma.WatchingListCreateInput['video']
  user?: import('@prisma/client').Prisma.WatchingListCreateInput['user']
  duration?: import('@prisma/client').Prisma.WatchingListCreateInput['duration']
  watchtime?: import('@prisma/client').Prisma.WatchingListCreateInput['watchtime']
  status?: import('@prisma/client').Prisma.WatchingListCreateInput['status']
  updatedAt?: import('@prisma/client').Prisma.WatchingListCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.WatchingListCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.WatchingListCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.WatchingListCreateInput['createdBy']
}

type ResolvedWatchingListUpdateInput = {
  id?: undefined
  video?: import('@prisma/client').Prisma.WatchingListUpdateInput['video']
  user?: import('@prisma/client').Prisma.WatchingListUpdateInput['user']
  duration?: import('@prisma/client').Prisma.WatchingListUpdateInput['duration']
  watchtime?: import('@prisma/client').Prisma.WatchingListUpdateInput['watchtime']
  status?: import('@prisma/client').Prisma.WatchingListUpdateInput['status']
  updatedAt?: import('@prisma/client').Prisma.WatchingListUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.WatchingListUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.WatchingListUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.WatchingListUpdateInput['createdBy']
}

type ResolvedCertificateCreateInput = {
  id?: import('@prisma/client').Prisma.CertificateCreateInput['id']
  user?: import('@prisma/client').Prisma.CertificateCreateInput['user']
  certificate: {
  filename?: import('@prisma/client').Prisma.CertificateCreateInput['certificate_filename']
  filesize?: import('@prisma/client').Prisma.CertificateCreateInput['certificate_filesize']
  }
  createdAt?: import('@prisma/client').Prisma.CertificateCreateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.CertificateCreateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.CertificateCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.CertificateCreateInput['createdBy']
}

type ResolvedCertificateUpdateInput = {
  id?: undefined
  user?: import('@prisma/client').Prisma.CertificateUpdateInput['user']
  certificate: {
  filename?: import('@prisma/client').Prisma.CertificateUpdateInput['certificate_filename']
  filesize?: import('@prisma/client').Prisma.CertificateUpdateInput['certificate_filesize']
  }
  createdAt?: import('@prisma/client').Prisma.CertificateUpdateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.CertificateUpdateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.CertificateUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.CertificateUpdateInput['createdBy']
}

type ResolvedMembershipCreateInput = {
  id?: import('@prisma/client').Prisma.MembershipCreateInput['id']
  location?: import('@prisma/client').Prisma.MembershipCreateInput['location']
  type?: import('@prisma/client').Prisma.MembershipCreateInput['type']
  name?: import('@prisma/client').Prisma.MembershipCreateInput['name']
  phone?: import('@prisma/client').Prisma.MembershipCreateInput['phone']
  email?: import('@prisma/client').Prisma.MembershipCreateInput['email']
  designation?: import('@prisma/client').Prisma.MembershipCreateInput['designation']
  company?: import('@prisma/client').Prisma.MembershipCreateInput['company']
  pincode?: import('@prisma/client').Prisma.MembershipCreateInput['pincode']
  city?: import('@prisma/client').Prisma.MembershipCreateInput['city']
  state?: import('@prisma/client').Prisma.MembershipCreateInput['state']
  country?: import('@prisma/client').Prisma.MembershipCreateInput['country']
  address?: import('@prisma/client').Prisma.MembershipCreateInput['address']
  updatedAt?: import('@prisma/client').Prisma.MembershipCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.MembershipCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.MembershipCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.MembershipCreateInput['createdBy']
}

type ResolvedMembershipUpdateInput = {
  id?: undefined
  location?: import('@prisma/client').Prisma.MembershipUpdateInput['location']
  type?: import('@prisma/client').Prisma.MembershipUpdateInput['type']
  name?: import('@prisma/client').Prisma.MembershipUpdateInput['name']
  phone?: import('@prisma/client').Prisma.MembershipUpdateInput['phone']
  email?: import('@prisma/client').Prisma.MembershipUpdateInput['email']
  designation?: import('@prisma/client').Prisma.MembershipUpdateInput['designation']
  company?: import('@prisma/client').Prisma.MembershipUpdateInput['company']
  pincode?: import('@prisma/client').Prisma.MembershipUpdateInput['pincode']
  city?: import('@prisma/client').Prisma.MembershipUpdateInput['city']
  state?: import('@prisma/client').Prisma.MembershipUpdateInput['state']
  country?: import('@prisma/client').Prisma.MembershipUpdateInput['country']
  address?: import('@prisma/client').Prisma.MembershipUpdateInput['address']
  updatedAt?: import('@prisma/client').Prisma.MembershipUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.MembershipUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.MembershipUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.MembershipUpdateInput['createdBy']
}

type ResolvedCallRequestCreateInput = {
  id?: import('@prisma/client').Prisma.CallRequestCreateInput['id']
  name?: import('@prisma/client').Prisma.CallRequestCreateInput['name']
  email?: import('@prisma/client').Prisma.CallRequestCreateInput['email']
  phoneNumber?: import('@prisma/client').Prisma.CallRequestCreateInput['phoneNumber']
  message?: import('@prisma/client').Prisma.CallRequestCreateInput['message']
  time?: import('@prisma/client').Prisma.CallRequestCreateInput['time']
  updatedAt?: import('@prisma/client').Prisma.CallRequestCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.CallRequestCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.CallRequestCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.CallRequestCreateInput['createdBy']
}

type ResolvedCallRequestUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.CallRequestUpdateInput['name']
  email?: import('@prisma/client').Prisma.CallRequestUpdateInput['email']
  phoneNumber?: import('@prisma/client').Prisma.CallRequestUpdateInput['phoneNumber']
  message?: import('@prisma/client').Prisma.CallRequestUpdateInput['message']
  time?: import('@prisma/client').Prisma.CallRequestUpdateInput['time']
  updatedAt?: import('@prisma/client').Prisma.CallRequestUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.CallRequestUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.CallRequestUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.CallRequestUpdateInput['createdBy']
}

type ResolvedWillMeetUpCreateInput = {
  id?: import('@prisma/client').Prisma.WillMeetUpCreateInput['id']
  name?: import('@prisma/client').Prisma.WillMeetUpCreateInput['name']
  email?: import('@prisma/client').Prisma.WillMeetUpCreateInput['email']
  phoneNumber?: import('@prisma/client').Prisma.WillMeetUpCreateInput['phoneNumber']
  organization?: import('@prisma/client').Prisma.WillMeetUpCreateInput['organization']
  updatedAt?: import('@prisma/client').Prisma.WillMeetUpCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.WillMeetUpCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.WillMeetUpCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.WillMeetUpCreateInput['createdBy']
}

type ResolvedWillMeetUpUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.WillMeetUpUpdateInput['name']
  email?: import('@prisma/client').Prisma.WillMeetUpUpdateInput['email']
  phoneNumber?: import('@prisma/client').Prisma.WillMeetUpUpdateInput['phoneNumber']
  organization?: import('@prisma/client').Prisma.WillMeetUpUpdateInput['organization']
  updatedAt?: import('@prisma/client').Prisma.WillMeetUpUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.WillMeetUpUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.WillMeetUpUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.WillMeetUpUpdateInput['createdBy']
}

type ResolvedBannerCreateInput = {
  id?: import('@prisma/client').Prisma.BannerCreateInput['id']
  name?: import('@prisma/client').Prisma.BannerCreateInput['name']
  banner_type?: import('@prisma/client').Prisma.BannerCreateInput['banner_type']
  videoId?: import('@prisma/client').Prisma.BannerCreateInput['videoId']
  image: {
  filesize?: import('@prisma/client').Prisma.BannerCreateInput['image_filesize']
  extension?: import('@prisma/client').Prisma.BannerCreateInput['image_extension']
  width?: import('@prisma/client').Prisma.BannerCreateInput['image_width']
  height?: import('@prisma/client').Prisma.BannerCreateInput['image_height']
  id?: import('@prisma/client').Prisma.BannerCreateInput['image_id']
  }
  active?: import('@prisma/client').Prisma.BannerCreateInput['active']
  createdAt?: import('@prisma/client').Prisma.BannerCreateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.BannerCreateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.BannerCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.BannerCreateInput['createdBy']
}

type ResolvedBannerUpdateInput = {
  id?: undefined
  name?: import('@prisma/client').Prisma.BannerUpdateInput['name']
  banner_type?: import('@prisma/client').Prisma.BannerUpdateInput['banner_type']
  videoId?: import('@prisma/client').Prisma.BannerUpdateInput['videoId']
  image: {
  filesize?: import('@prisma/client').Prisma.BannerUpdateInput['image_filesize']
  extension?: import('@prisma/client').Prisma.BannerUpdateInput['image_extension']
  width?: import('@prisma/client').Prisma.BannerUpdateInput['image_width']
  height?: import('@prisma/client').Prisma.BannerUpdateInput['image_height']
  id?: import('@prisma/client').Prisma.BannerUpdateInput['image_id']
  }
  active?: import('@prisma/client').Prisma.BannerUpdateInput['active']
  createdAt?: import('@prisma/client').Prisma.BannerUpdateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.BannerUpdateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.BannerUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.BannerUpdateInput['createdBy']
}

type ResolvedConfigCreateInput = {
  id?: import('@prisma/client').Prisma.ConfigCreateInput['id']
  key?: import('@prisma/client').Prisma.ConfigCreateInput['key']
  value?: import('@prisma/client').Prisma.ConfigCreateInput['value']
  createdAt?: import('@prisma/client').Prisma.ConfigCreateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.ConfigCreateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.ConfigCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.ConfigCreateInput['createdBy']
}

type ResolvedConfigUpdateInput = {
  id?: undefined
  key?: import('@prisma/client').Prisma.ConfigUpdateInput['key']
  value?: import('@prisma/client').Prisma.ConfigUpdateInput['value']
  createdAt?: import('@prisma/client').Prisma.ConfigUpdateInput['createdAt']
  updatedAt?: import('@prisma/client').Prisma.ConfigUpdateInput['updatedAt']
  updatedBy?: import('@prisma/client').Prisma.ConfigUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.ConfigUpdateInput['createdBy']
}

type ResolvedQuoteCreateInput = {
  id?: import('@prisma/client').Prisma.QuoteCreateInput['id']
  quote?: import('@prisma/client').Prisma.QuoteCreateInput['quote']
  date?: import('@prisma/client').Prisma.QuoteCreateInput['date']
  updatedAt?: import('@prisma/client').Prisma.QuoteCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.QuoteCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.QuoteCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.QuoteCreateInput['createdBy']
}

type ResolvedQuoteUpdateInput = {
  id?: undefined
  quote?: import('@prisma/client').Prisma.QuoteUpdateInput['quote']
  date?: import('@prisma/client').Prisma.QuoteUpdateInput['date']
  updatedAt?: import('@prisma/client').Prisma.QuoteUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.QuoteUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.QuoteUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.QuoteUpdateInput['createdBy']
}

type ResolvedNotificationCreateInput = {
  id?: import('@prisma/client').Prisma.NotificationCreateInput['id']
  title?: import('@prisma/client').Prisma.NotificationCreateInput['title']
  date?: import('@prisma/client').Prisma.NotificationCreateInput['date']
  description?: import('@prisma/client').Prisma.NotificationCreateInput['description']
  image: {
  filesize?: import('@prisma/client').Prisma.NotificationCreateInput['image_filesize']
  extension?: import('@prisma/client').Prisma.NotificationCreateInput['image_extension']
  width?: import('@prisma/client').Prisma.NotificationCreateInput['image_width']
  height?: import('@prisma/client').Prisma.NotificationCreateInput['image_height']
  id?: import('@prisma/client').Prisma.NotificationCreateInput['image_id']
  }
  updatedAt?: import('@prisma/client').Prisma.NotificationCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.NotificationCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.NotificationCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.NotificationCreateInput['createdBy']
}

type ResolvedNotificationUpdateInput = {
  id?: undefined
  title?: import('@prisma/client').Prisma.NotificationUpdateInput['title']
  date?: import('@prisma/client').Prisma.NotificationUpdateInput['date']
  description?: import('@prisma/client').Prisma.NotificationUpdateInput['description']
  image: {
  filesize?: import('@prisma/client').Prisma.NotificationUpdateInput['image_filesize']
  extension?: import('@prisma/client').Prisma.NotificationUpdateInput['image_extension']
  width?: import('@prisma/client').Prisma.NotificationUpdateInput['image_width']
  height?: import('@prisma/client').Prisma.NotificationUpdateInput['image_height']
  id?: import('@prisma/client').Prisma.NotificationUpdateInput['image_id']
  }
  updatedAt?: import('@prisma/client').Prisma.NotificationUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.NotificationUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.NotificationUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.NotificationUpdateInput['createdBy']
}

type ResolvedOneTimePasswordCreateInput = {
  id?: import('@prisma/client').Prisma.OneTimePasswordCreateInput['id']
  otp?: import('@prisma/client').Prisma.OneTimePasswordCreateInput['otp']
  email?: import('@prisma/client').Prisma.OneTimePasswordCreateInput['email']
  isUsed?: import('@prisma/client').Prisma.OneTimePasswordCreateInput['isUsed']
  user?: import('@prisma/client').Prisma.OneTimePasswordCreateInput['user']
  updatedAt?: import('@prisma/client').Prisma.OneTimePasswordCreateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.OneTimePasswordCreateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.OneTimePasswordCreateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.OneTimePasswordCreateInput['createdBy']
}

type ResolvedOneTimePasswordUpdateInput = {
  id?: undefined
  otp?: import('@prisma/client').Prisma.OneTimePasswordUpdateInput['otp']
  email?: import('@prisma/client').Prisma.OneTimePasswordUpdateInput['email']
  isUsed?: import('@prisma/client').Prisma.OneTimePasswordUpdateInput['isUsed']
  user?: import('@prisma/client').Prisma.OneTimePasswordUpdateInput['user']
  updatedAt?: import('@prisma/client').Prisma.OneTimePasswordUpdateInput['updatedAt']
  createdAt?: import('@prisma/client').Prisma.OneTimePasswordUpdateInput['createdAt']
  updatedBy?: import('@prisma/client').Prisma.OneTimePasswordUpdateInput['updatedBy']
  createdBy?: import('@prisma/client').Prisma.OneTimePasswordUpdateInput['createdBy']
}

export declare namespace Lists {
  export type User<Session = any> = import('@keystone-6/core').ListConfig<Lists.User.TypeInfo<Session>>
  namespace User {
    export type Item = import('@prisma/client').User
    export type TypeInfo<Session = any> = {
      key: 'User'
      isSingleton: false
      fields: 'id' | 'name' | 'email' | 'username' | 'azureId' | 'phone' | 'pincode' | 'city' | 'state' | 'country' | 'address' | 'organization' | 'password' | 'isAdmin' | 'isVerified' | 'subscription' | 'certificate' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: UserWhereInput
        uniqueWhere: UserWhereUniqueInput
        create: UserCreateInput
        update: UserUpdateInput
        orderBy: UserOrderByInput
      }
      prisma: {
        create: ResolvedUserCreateInput
        update: ResolvedUserUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Bulletin<Session = any> = import('@keystone-6/core').ListConfig<Lists.Bulletin.TypeInfo<Session>>
  namespace Bulletin {
    export type Item = import('@prisma/client').Bulletin
    export type TypeInfo<Session = any> = {
      key: 'Bulletin'
      isSingleton: false
      fields: 'id' | 'title' | 'subTitle' | 'url' | 'image' | 'information' | 'createdAt' | 'updatedAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: BulletinWhereInput
        uniqueWhere: BulletinWhereUniqueInput
        create: BulletinCreateInput
        update: BulletinUpdateInput
        orderBy: BulletinOrderByInput
      }
      prisma: {
        create: ResolvedBulletinCreateInput
        update: ResolvedBulletinUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Event<Session = any> = import('@keystone-6/core').ListConfig<Lists.Event.TypeInfo<Session>>
  namespace Event {
    export type Item = import('@prisma/client').Event
    export type TypeInfo<Session = any> = {
      key: 'Event'
      isSingleton: false
      fields: 'id' | 'title' | 'subTitle' | 'startDate' | 'endDate' | 'url' | 'information' | 'image' | 'createdAt' | 'updatedAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: EventWhereInput
        uniqueWhere: EventWhereUniqueInput
        create: EventCreateInput
        update: EventUpdateInput
        orderBy: EventOrderByInput
      }
      prisma: {
        create: ResolvedEventCreateInput
        update: ResolvedEventUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Announcement<Session = any> = import('@keystone-6/core').ListConfig<Lists.Announcement.TypeInfo<Session>>
  namespace Announcement {
    export type Item = import('@prisma/client').Announcement
    export type TypeInfo<Session = any> = {
      key: 'Announcement'
      isSingleton: false
      fields: 'id' | 'title' | 'date' | 'information' | 'linkType' | 'link' | 'linkTarget' | 'image' | 'createdAt' | 'updatedAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: AnnouncementWhereInput
        uniqueWhere: AnnouncementWhereUniqueInput
        create: AnnouncementCreateInput
        update: AnnouncementUpdateInput
        orderBy: AnnouncementOrderByInput
      }
      prisma: {
        create: ResolvedAnnouncementCreateInput
        update: ResolvedAnnouncementUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Plan<Session = any> = import('@keystone-6/core').ListConfig<Lists.Plan.TypeInfo<Session>>
  namespace Plan {
    export type Item = import('@prisma/client').Plan
    export type TypeInfo<Session = any> = {
      key: 'Plan'
      isSingleton: false
      fields: 'id' | 'name' | 'srNo' | 'random' | 'price' | 'description' | 'subscription' | 'video' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: PlanWhereInput
        uniqueWhere: PlanWhereUniqueInput
        create: PlanCreateInput
        update: PlanUpdateInput
        orderBy: PlanOrderByInput
      }
      prisma: {
        create: ResolvedPlanCreateInput
        update: ResolvedPlanUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Subscription<Session = any> = import('@keystone-6/core').ListConfig<Lists.Subscription.TypeInfo<Session>>
  namespace Subscription {
    export type Item = import('@prisma/client').Subscription
    export type TypeInfo<Session = any> = {
      key: 'Subscription'
      isSingleton: false
      fields: 'id' | 'plan' | 'user' | 'paymentStatus' | 'paymentId' | 'amount' | 'transactionDate' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: SubscriptionWhereInput
        uniqueWhere: SubscriptionWhereUniqueInput
        create: SubscriptionCreateInput
        update: SubscriptionUpdateInput
        orderBy: SubscriptionOrderByInput
      }
      prisma: {
        create: ResolvedSubscriptionCreateInput
        update: ResolvedSubscriptionUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Video<Session = any> = import('@keystone-6/core').ListConfig<Lists.Video.TypeInfo<Session>>
  namespace Video {
    export type Item = import('@prisma/client').Video
    export type TypeInfo<Session = any> = {
      key: 'Video'
      isSingleton: false
      fields: 'id' | 'name' | 'srNo' | 'video_type' | 'isPublic' | 'isFeatured' | 'videoId' | 'url' | 'thumbnail' | 'plan' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: VideoWhereInput
        uniqueWhere: VideoWhereUniqueInput
        create: VideoCreateInput
        update: VideoUpdateInput
        orderBy: VideoOrderByInput
      }
      prisma: {
        create: ResolvedVideoCreateInput
        update: ResolvedVideoUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type WatchingList<Session = any> = import('@keystone-6/core').ListConfig<Lists.WatchingList.TypeInfo<Session>>
  namespace WatchingList {
    export type Item = import('@prisma/client').WatchingList
    export type TypeInfo<Session = any> = {
      key: 'WatchingList'
      isSingleton: false
      fields: 'id' | 'video' | 'user' | 'duration' | 'watchtime' | 'status' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: WatchingListWhereInput
        uniqueWhere: WatchingListWhereUniqueInput
        create: WatchingListCreateInput
        update: WatchingListUpdateInput
        orderBy: WatchingListOrderByInput
      }
      prisma: {
        create: ResolvedWatchingListCreateInput
        update: ResolvedWatchingListUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Certificate<Session = any> = import('@keystone-6/core').ListConfig<Lists.Certificate.TypeInfo<Session>>
  namespace Certificate {
    export type Item = import('@prisma/client').Certificate
    export type TypeInfo<Session = any> = {
      key: 'Certificate'
      isSingleton: false
      fields: 'id' | 'user' | 'certificate' | 'createdAt' | 'updatedAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: CertificateWhereInput
        uniqueWhere: CertificateWhereUniqueInput
        create: CertificateCreateInput
        update: CertificateUpdateInput
        orderBy: CertificateOrderByInput
      }
      prisma: {
        create: ResolvedCertificateCreateInput
        update: ResolvedCertificateUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Membership<Session = any> = import('@keystone-6/core').ListConfig<Lists.Membership.TypeInfo<Session>>
  namespace Membership {
    export type Item = import('@prisma/client').Membership
    export type TypeInfo<Session = any> = {
      key: 'Membership'
      isSingleton: false
      fields: 'id' | 'location' | 'type' | 'name' | 'phone' | 'email' | 'designation' | 'company' | 'pincode' | 'city' | 'state' | 'country' | 'address' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: MembershipWhereInput
        uniqueWhere: MembershipWhereUniqueInput
        create: MembershipCreateInput
        update: MembershipUpdateInput
        orderBy: MembershipOrderByInput
      }
      prisma: {
        create: ResolvedMembershipCreateInput
        update: ResolvedMembershipUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type CallRequest<Session = any> = import('@keystone-6/core').ListConfig<Lists.CallRequest.TypeInfo<Session>>
  namespace CallRequest {
    export type Item = import('@prisma/client').CallRequest
    export type TypeInfo<Session = any> = {
      key: 'CallRequest'
      isSingleton: false
      fields: 'id' | 'name' | 'email' | 'phoneNumber' | 'message' | 'time' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: CallRequestWhereInput
        uniqueWhere: CallRequestWhereUniqueInput
        create: CallRequestCreateInput
        update: CallRequestUpdateInput
        orderBy: CallRequestOrderByInput
      }
      prisma: {
        create: ResolvedCallRequestCreateInput
        update: ResolvedCallRequestUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type WillMeetUp<Session = any> = import('@keystone-6/core').ListConfig<Lists.WillMeetUp.TypeInfo<Session>>
  namespace WillMeetUp {
    export type Item = import('@prisma/client').WillMeetUp
    export type TypeInfo<Session = any> = {
      key: 'WillMeetUp'
      isSingleton: false
      fields: 'id' | 'name' | 'email' | 'phoneNumber' | 'organization' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: WillMeetUpWhereInput
        uniqueWhere: WillMeetUpWhereUniqueInput
        create: WillMeetUpCreateInput
        update: WillMeetUpUpdateInput
        orderBy: WillMeetUpOrderByInput
      }
      prisma: {
        create: ResolvedWillMeetUpCreateInput
        update: ResolvedWillMeetUpUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Banner<Session = any> = import('@keystone-6/core').ListConfig<Lists.Banner.TypeInfo<Session>>
  namespace Banner {
    export type Item = import('@prisma/client').Banner
    export type TypeInfo<Session = any> = {
      key: 'Banner'
      isSingleton: false
      fields: 'id' | 'name' | 'banner_type' | 'videoId' | 'image' | 'active' | 'createdAt' | 'updatedAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: BannerWhereInput
        uniqueWhere: BannerWhereUniqueInput
        create: BannerCreateInput
        update: BannerUpdateInput
        orderBy: BannerOrderByInput
      }
      prisma: {
        create: ResolvedBannerCreateInput
        update: ResolvedBannerUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Config<Session = any> = import('@keystone-6/core').ListConfig<Lists.Config.TypeInfo<Session>>
  namespace Config {
    export type Item = import('@prisma/client').Config
    export type TypeInfo<Session = any> = {
      key: 'Config'
      isSingleton: false
      fields: 'id' | 'key' | 'value' | 'createdAt' | 'updatedAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: ConfigWhereInput
        uniqueWhere: ConfigWhereUniqueInput
        create: ConfigCreateInput
        update: ConfigUpdateInput
        orderBy: ConfigOrderByInput
      }
      prisma: {
        create: ResolvedConfigCreateInput
        update: ResolvedConfigUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Quote<Session = any> = import('@keystone-6/core').ListConfig<Lists.Quote.TypeInfo<Session>>
  namespace Quote {
    export type Item = import('@prisma/client').Quote
    export type TypeInfo<Session = any> = {
      key: 'Quote'
      isSingleton: false
      fields: 'id' | 'quote' | 'date' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: QuoteWhereInput
        uniqueWhere: QuoteWhereUniqueInput
        create: QuoteCreateInput
        update: QuoteUpdateInput
        orderBy: QuoteOrderByInput
      }
      prisma: {
        create: ResolvedQuoteCreateInput
        update: ResolvedQuoteUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type Notification<Session = any> = import('@keystone-6/core').ListConfig<Lists.Notification.TypeInfo<Session>>
  namespace Notification {
    export type Item = import('@prisma/client').Notification
    export type TypeInfo<Session = any> = {
      key: 'Notification'
      isSingleton: false
      fields: 'id' | 'title' | 'date' | 'description' | 'image' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: NotificationWhereInput
        uniqueWhere: NotificationWhereUniqueInput
        create: NotificationCreateInput
        update: NotificationUpdateInput
        orderBy: NotificationOrderByInput
      }
      prisma: {
        create: ResolvedNotificationCreateInput
        update: ResolvedNotificationUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
  export type OneTimePassword<Session = any> = import('@keystone-6/core').ListConfig<Lists.OneTimePassword.TypeInfo<Session>>
  namespace OneTimePassword {
    export type Item = import('@prisma/client').OneTimePassword
    export type TypeInfo<Session = any> = {
      key: 'OneTimePassword'
      isSingleton: false
      fields: 'id' | 'otp' | 'email' | 'isUsed' | 'user' | 'updatedAt' | 'createdAt' | 'updatedBy' | 'createdBy'
      item: Item
      inputs: {
        where: OneTimePasswordWhereInput
        uniqueWhere: OneTimePasswordWhereUniqueInput
        create: OneTimePasswordCreateInput
        update: OneTimePasswordUpdateInput
        orderBy: OneTimePasswordOrderByInput
      }
      prisma: {
        create: ResolvedOneTimePasswordCreateInput
        update: ResolvedOneTimePasswordUpdateInput
      }
      all: __TypeInfo<Session>
    }
  }
}
export type Context<Session = any> = import('@keystone-6/core/types').KeystoneContext<TypeInfo<Session>>
export type Config<Session = any> = import('@keystone-6/core/types').KeystoneConfig<TypeInfo<Session>>

export type TypeInfo<Session = any> = {
  lists: {
    readonly User: Lists.User.TypeInfo<Session>
    readonly Bulletin: Lists.Bulletin.TypeInfo<Session>
    readonly Event: Lists.Event.TypeInfo<Session>
    readonly Announcement: Lists.Announcement.TypeInfo<Session>
    readonly Plan: Lists.Plan.TypeInfo<Session>
    readonly Subscription: Lists.Subscription.TypeInfo<Session>
    readonly Video: Lists.Video.TypeInfo<Session>
    readonly WatchingList: Lists.WatchingList.TypeInfo<Session>
    readonly Certificate: Lists.Certificate.TypeInfo<Session>
    readonly Membership: Lists.Membership.TypeInfo<Session>
    readonly CallRequest: Lists.CallRequest.TypeInfo<Session>
    readonly WillMeetUp: Lists.WillMeetUp.TypeInfo<Session>
    readonly Banner: Lists.Banner.TypeInfo<Session>
    readonly Config: Lists.Config.TypeInfo<Session>
    readonly Quote: Lists.Quote.TypeInfo<Session>
    readonly Notification: Lists.Notification.TypeInfo<Session>
    readonly OneTimePassword: Lists.OneTimePassword.TypeInfo<Session>
  }
  prisma: import('@prisma/client').PrismaClient
  session: Session
}

type __TypeInfo<Session = any> = TypeInfo<Session>

export type Lists<Session = any> = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core').ListConfig<TypeInfo<Session>['lists'][Key]>
} & Record<string, import('@keystone-6/core').ListConfig<any>>

export {}
